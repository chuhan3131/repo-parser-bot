import asyncio
import aiohttp
import re
import logging
import os
from collections import defaultdict
from functools import lru_cache
from aiogram import Bot, Dispatcher, types
from aiogram.types import InlineQueryResultArticle, InputTextMessageContent
from dotenv import load_dotenv

load_dotenv()

logging.basicConfig(
    level=logging.INFO,
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s'
)
logger = logging.getLogger(__name__)

API_TOKEN = os.getenv('BOT_TOKEN')
if not API_TOKEN:
    raise ValueError("BOT_TOKEN –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ .env —Ñ–∞–π–ª–µ")

bot = Bot(token=API_TOKEN)
dp = Dispatcher()

@lru_cache(maxsize=100)
async def get_repo_info(repo_url: str):
    """–ê—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–æ–µ –ø–æ–ª—É—á–µ–Ω–∏–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏–∏ —Å –∫—ç—à–∏—Ä–æ–≤–∞–Ω–∏–µ–º"""
    try:
        # –í–∞–ª–∏–¥–∞—Ü–∏—è URL
        if not is_valid_github_url(repo_url):
            return None, None, None

        parts = repo_url.strip("/").split("/")
        owner, repo = parts[3], parts[4].replace(".git", "")

        async with aiohttp.ClientSession() as session:
            # –ü–æ–ª—É—á–µ–Ω–∏–µ –æ—Å–Ω–æ–≤–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏
            repo_info_url = f"https://api.github.com/repos/{owner}/{repo}"
            async with session.get(repo_info_url) as response:
                if response.status != 200:
                    return None, None, None
                info = await response.json()

            if "message" in info:
                return None, None, None

            # –ò–∑–≤–ª–µ—á–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö
            description = info.get("description", "–Ω–µ—Ç –æ–ø–∏—Å–∞–Ω–∏—è") or "–Ω–µ—Ç –æ–ø–∏—Å–∞–Ω–∏—è"
            stars = info.get("stargazers_count", 0)
            language = info.get("language", "–Ω–µ —É–∫–∞–∑–∞–Ω")
            default_branch = info.get("default_branch", "main")
            forks_count = info.get("forks_count", 0)
            issues_count = info.get("open_issues_count", 0)
            updated_at = info.get("updated_at", "")

            # –§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏
            repo_info = (
                f"<b>üì¶ –†–µ–ø–æ–∑–∏—Ç–æ—Ä–∏–π: <a href='https://github.com/{owner}'>{owner}</a>/<a href='https://github.com/{owner}/{repo}'>{repo}</a></b>\n"
                f"‚≠ê <b>–ó–≤—ë–∑–¥—ã:</b> <code>{stars}</code>\n"
                f"üíª <b>–Ø–∑—ã–∫:</b> <code>{language}</code>\n"
                f"üç¥ <b>–§–æ—Ä–∫–∏:</b> <code>{forks_count}</code>\n"
                f"üö® <b>Issues:</b> <code>{issues_count}</code>\n"
                f"üìù <b>–û–ø–∏—Å–∞–Ω–∏–µ:</b> <code>{description}</code>\n"
            )

            # –ü–æ–ª—É—á–µ–Ω–∏–µ —Å—Ç—Ä—É–∫—Ç—É—Ä—ã —Ñ–∞–π–ª–æ–≤
            tree_url = f"https://api.github.com/repos/{owner}/{repo}/git/trees/{default_branch}?recursive=1"
            async with session.get(tree_url) as response:
                if response.status == 200:
                    tree_data = await response.json()
                    files = [item["path"] for item in tree_data.get("tree", []) if item["type"] == "blob"]
                    tree_text = build_tree(files, limit=50)
                    if len(files) > 50:
                        tree_text += f"\n...–∏ –µ—â—ë {len(files) - 50} —Ñ–∞–π–ª–æ–≤"
                else:
                    tree_text = "–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å —Å—Ç—Ä—É–∫—Ç—É—Ä—É —Ñ–∞–π–ª–æ–≤"

            # –ü–æ–ª—É—á–µ–Ω–∏–µ README
            readme_url = f"https://raw.githubusercontent.com/{owner}/{repo}/{default_branch}/README.md"
            async with session.get(readme_url) as response:
                if response.status == 200:
                    readme_text = await response.text()
                    readme_text = clean_readme_text(readme_text)
                    if len(readme_text) > 1000:
                        readme_text = readme_text[:1000] + "\n... (–æ–±—Ä–µ–∑–∞–Ω–æ)"
                else:
                    readme_text = "README.md –Ω–µ –Ω–∞–π–¥–µ–Ω"

            return repo_info, tree_text, readme_text

    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏–∏: {e}")
        return None, None, None

def is_valid_github_url(url: str) -> bool:
    """–ü—Ä–æ–≤–µ—Ä–∫–∞ –≤–∞–ª–∏–¥–Ω–æ—Å—Ç–∏ GitHub URL"""
    return url.startswith(("http://github.com/", "https://github.com/")) and len(url.split("/")) >= 5

def clean_readme_text(text: str) -> str:
    """–û—á–∏—Å—Ç–∫–∞ README –æ—Ç –Ω–µ–ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º—ã—Ö —Ç–µ–≥–æ–≤ –∏ —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è"""
    text = re.sub(r'<img[^>]*>', '', text)
    text = re.sub(r'!\[.*?\]\(.*?\)', '', text)
    text = text.replace('<', '&lt;').replace('>', '&gt;')
    text = re.sub(r'\n{3,}', '\n\n', text)
    return text.strip()

def build_tree(paths: list[str], limit: int = 50) -> str:
    """–ü–æ—Å—Ç—Ä–æ–µ–Ω–∏–µ –¥–µ—Ä–µ–≤–∞ —Ñ–∞–π–ª–æ–≤"""
    tree = lambda: defaultdict(tree)
    root = tree()

    for path in paths[:limit]:
        parts = path.split("/")
        cur = root
        for p in parts:
            cur = cur[p]

    lines = []

    def render(node, prefix=""):
        total = len(node)
        for i, (name, child) in enumerate(sorted(node.items())):
            connector = "‚îî‚îÄ " if i == total - 1 else "‚îú‚îÄ "
            lines.append(prefix + connector + name)
            if child:
                extension = "   " if i == total - 1 else "‚îÇ  "
                render(child, prefix + extension)

    render(root)
    return "\n".join(lines)

def truncate_text(text: str, max_length: int = 4000) -> str:
    """–û–±—Ä–µ–∑–∫–∞ —Ç–µ–∫—Å—Ç–∞ –¥–æ –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–π –¥–ª–∏–Ω—ã"""
    if len(text) > max_length:
        return text[:max_length-3] + "..."
    return text

@dp.inline_query()
async def inline_handler(inline_query: types.InlineQuery):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∏–Ω–ª–∞–π–Ω –∑–∞–ø—Ä–æ—Å–æ–≤"""
    query = inline_query.query.strip()
    
    if not query or not query.startswith(("http://github.com/", "https://github.com/")):
        return

    logger.info(f"–û–±—Ä–∞–±–æ—Ç–∫–∞ –∑–∞–ø—Ä–æ—Å–∞: {query}")

    repo_info, tree_text, readme_text = await get_repo_info(query)
    
    if not repo_info:
        results = [
            InlineQueryResultArticle(
                id="error",
                title="–û—à–∏–±–∫–∞",
                description="–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏–∏",
                input_message_content=InputTextMessageContent(
                    message_text="‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏–∏. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ URL –∏ –ø–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.",
                    parse_mode='HTML'
                )
            )
        ]
        await inline_query.answer(results, cache_time=1)
        return

    # –§–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏–µ –∏—Ç–æ–≥–æ–≤–æ–≥–æ —Ç–µ–∫—Å—Ç–∞
    result_text = (
        f"{repo_info}\n"
        f"<b>üìÇ –°—Ç—Ä—É–∫—Ç—É—Ä–∞ —Ñ–∞–π–ª–æ–≤:</b>\n<code>{tree_text}</code>\n\n"
        "<b>‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ</b>\n\n"
        f"<b>üìñ README:</b>\n<code>{readme_text}</code>"
    )

    # –û–±—Ä–µ–∑–∫–∞ —Ç–µ–∫—Å—Ç–∞ –µ—Å–ª–∏ –ø—Ä–µ–≤—ã—à–µ–Ω –ª–∏–º–∏—Ç Telegram
    result_text = truncate_text(result_text)

    results = [
        InlineQueryResultArticle(
            id="1",
            title="–ê–Ω–∞–ª–∏–∑ —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏—è GitHub",
            input_message_content=InputTextMessageContent(
                message_text=result_text,
                parse_mode='HTML'
            ),
            description="–ü–æ–∫–∞–∑–∞—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏–∏",
            thumb_url="https://github.com/favicon.ico",
            thumb_width=64,
            thumb_height=64
        )
    ]

    await inline_query.answer(results, cache_time=300)  # –ö—ç—à –Ω–∞ 5 –º–∏–Ω—É—Ç
    logger.info(f"–£—Å–ø–µ—à–Ω–æ –æ–±—Ä–∞–±–æ—Ç–∞–Ω –∑–∞–ø—Ä–æ—Å: {query}")

async def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è"""
    logger.info("–ë–æ—Ç –∑–∞–ø—É—â–µ–Ω")
    try:
        await dp.start_polling(bot)
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ –±–æ—Ç–∞: {e}")
    finally:
        await bot.session.close()

if __name__ == "__main__":
    asyncio.run(main())
